apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'checkstyle'

group 'org.threadly'
version = '3.0.0-SNAPSHOT'

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
  mavenCentral()
}

dependencies {
  testCompile group: 'junit', name: 'junit', version: '4.+'
}

compileJava {
  options.compilerArgs << "-Xlint:all" << "-Werror"
  
  String[] java6Paths = new String[5]
  java6Paths[0] = "/usr/lib/jvm/java-6-openjdk-amd64/jre/lib/rt.jar"
  java6Paths[1] = "/usr/lib/jvm/java-6-openjdk/jre/lib/rt.jar"
  java6Paths[2] = "/usr/lib/jvm/java-1.6.0-openjdk-amd64/jre/lib/rt.jar"
  java6Paths[3] = "/usr/lib/jvm/java-1.6.0-openjdk/jre/lib/rt.jar"
  java6Paths[4] = "/usr/lib/jvm/java-6-sun/jre/lib/rt.jar"
  for (String path : java6Paths) {
    if (new java.io.File(path).exists()) {
      println 'Using java 6 rt.jar: ' + path
      options.bootClasspath = path
      break
    }
  }
  if (options.bootClasspath == null) {
    println 'Unable to find java 6 rt.jar, will cause failure so exiting now'
    println ''
    System.exit(1)
  }
}

compileTestJava {
  options.compilerArgs << "-Xlint:all" << "-Xlint:-deprecation" << "-Werror"
  
  String[] java6Paths = new String[5]
  java6Paths[0] = "/usr/lib/jvm/java-6-openjdk-amd64/jre/lib/rt.jar"
  java6Paths[1] = "/usr/lib/jvm/java-6-openjdk/jre/lib/rt.jar"
  java6Paths[2] = "/usr/lib/jvm/java-1.6.0-openjdk-amd64/jre/lib/rt.jar"
  java6Paths[3] = "/usr/lib/jvm/java-1.6.0-openjdk/jre/lib/rt.jar"
  java6Paths[4] = "/usr/lib/jvm/java-6-sun/jre/lib/rt.jar"
  for (String path : java6Paths) {
    if (new java.io.File(path).exists()) {
      options.bootClasspath = path
      break
    }
  }
}

plugins.withType(JavaPlugin) {
  checkstyle.sourceSets = [sourceSets.main]
}

test {
  getReports().getJunitXml().setDestination(file("$buildDir/test-results/xml"))
}

jar {
  manifest {
    attributes 'Implementation-Title': 'Threadly', 'Implementation-Version': version
  }
}

javadoc {
  source = sourceSets.main.allJava
  options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PUBLIC
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

signing {
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment {
        MavenDeployment deployment -> signing.signPom(deployment)
      }
 
      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }
      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }
 
      pom.project {
        name 'Threadly'
        packaging 'jar'
        description 'A library of tools to assist with safe concurrent java development.  Providing a unique priority based thread pool, and ways to distrbute threaded work.'
        url 'http://threadly.org/'
 
        scm {
          url 'scm:git@github.com:threadly/threadly.git'
          connection 'scm:git@github.com:threadly/threadly.git'
          developerConnection 'scm:git@github.com:threadly/threadly.git'
        }
 
        licenses {
          license {
            name 'GNU LESSER GENERAL PUBLIC LICENSE (LGPLv3)'
            url 'http://www.gnu.org/licenses/lgpl-3.0.txt'
            distribution 'repo'
          }
        }
 
        developers {
          developer {
            id 'jent'
            name 'Mike Jensen'
          }
        }
      }
    }
  }
}
